Here are sample tests to check the effect of unrolling on AXPY1.

In AXPY1, you have 3 inputs.
1) array x1
2) array y
3) scalar a1

The result will be y = y + a1*x1

In consts.h, NN determines the size of x1 and y, AA determines the value of a1, and TC is the thread count (number of threads per block).

The values of the array x1 and y are set to equal to their component number. So, the 0th element of x1 or y is 0, the 1th element of x1 or y is 1, the 2nd element of x1 or y is 2, etc etc.

In our case, NN is 2 to the power 20, AA is 1, and TC is 128. By empirical test, without any unrolling, TC=128 is the best GPU configuration performance wise with respect to TC, among the set {32, 64, 128, 256, 512}.

cpu.c is the cpu version.

noroll.cu is the gpu version with no unrolling (consider it unroll factor 1).

unrolls2.cu is the gpu version with unroll factor 2 (stripe version).

unrollp2.cu is the gpu version with unroll factor 2 (strided version for memory coalescence).

other files can be infered from the above naming convention.

To build, just configure the consts.h file with the values you like, and run ./build.sh.  For the purpose of this testing, NN has to be divisible by 8 (the largest unrollfactor used here).

Run each executable generated to see the performance. the executable will print the time taken to execute the computation, and also some values from the resultant y, in particular the first few and last few components of the vector y.

You can erase all the executables by running ./clean.sh
