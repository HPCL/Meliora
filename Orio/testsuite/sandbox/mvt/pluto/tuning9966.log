
====== START ORIO ======

----- begin reading the source file: mvt.ancc.c -----
----- finished reading the source file -----

----- begin parsing annotations -----
----- finished parsing annotations -----

----- begin optimizations -----
orio.main.tspec.tune_info: 64: unexpected statement type: "decl"
  File "/home/pbalapra/Libs/bin/orcc", line 24, in <module>
    orio.main.orio_main.start(sys.argv, orio.main.orio_main.C_CPP)

  File "/fusion/gpfs/home/pbalapra/Libs/lib/python2.6/site-packages/orio/main/orio_main.py", line 99, in start
    optimized_code_seq = odriver.optimizeCodeFrags(cfrags,{}, False)

  File "/fusion/gpfs/home/pbalapra/Libs/lib/python2.6/site-packages/orio/main/opt_driver.py", line 168, in optimizeCodeFrags
    cur_seq = self.__optimizeCodeFrag(cf, perf_params)

  File "/fusion/gpfs/home/pbalapra/Libs/lib/python2.6/site-packages/orio/main/opt_driver.py", line 91, in __optimizeCodeFrag
    cfrag.cfrags)

  File "/fusion/gpfs/home/pbalapra/Libs/lib/python2.6/site-packages/orio/main/tuner/tuner.py", line 45, in tune
    tinfo = self.__extractTuningInfo(module_body_code, line_no)

  File "/fusion/gpfs/home/pbalapra/Libs/lib/python2.6/site-packages/orio/main/tuner/tuner.py", line 205, in __extractTuningInfo
    tinfo = orio.main.tspec.tspec.TSpec().parseSpec(code, line_no)

  File "/fusion/gpfs/home/pbalapra/Libs/lib/python2.6/site-packages/orio/main/tspec/tspec.py", line 27, in parseSpec
    tinfo = tune_info.TuningInfoGen().generate(stmt_seq)

  File "/fusion/gpfs/home/pbalapra/Libs/lib/python2.6/site-packages/orio/main/tspec/tune_info.py", line 678, in generate
    iparam_params, iparam_constraints = self.__genInputParamsInfo(body_stmt_seq, line_no)

  File "/fusion/gpfs/home/pbalapra/Libs/lib/python2.6/site-packages/orio/main/tspec/tune_info.py", line 386, in __genInputParamsInfo
    err('orio.main.tspec.tune_info: %s: unexpected statement type: "%s"' % (line_no, keyw))

  File "/fusion/gpfs/home/pbalapra/Libs/lib/python2.6/site-packages/orio/main/util/globals.py", line 169, in err
    Globals().logger.error(errmsg + '\n' + '\n'.join(traceback.format_stack()))

